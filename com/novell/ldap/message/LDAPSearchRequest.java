/* Generated by Together */

package com.novell.ldap.message;

import com.novell.ldap.*;
import com.novell.ldap.asn1.*;
import com.novell.ldap.rfc2251.*;

/*
 *       SearchRequest ::= [APPLICATION 3] SEQUENCE {
 *               baseObject      LDAPDN,
 *               scope           ENUMERATED {
 *                       baseObject              (0),
 *                       singleLevel             (1),
 *                       wholeSubtree            (2) },
 *               derefAliases    ENUMERATED {
 *                       neverDerefAliases       (0),
 *                       derefInSearching        (1),
 *                       derefFindingBaseObj     (2),
 *                       derefAlways             (3) },
 *               sizeLimit       INTEGER (0 .. maxInt),
 *               timeLimit       INTEGER (0 .. maxInt),
 *               typesOnly       BOOLEAN,
 *               filter          Filter,
 *               attributes      AttributeDescriptionList }
 */
public class LDAPSearchRequest extends LDAPMessage {
    /**
     * Created a SearchRequest from search parameters
     * @param base
     * @param scope
     * @param attrs
     * @param typesOnly
     * @param cons
     */
    public LDAPSearchRequest( String base,
                              int scope,
                              String filter,
                              String[] attrs,
                              boolean typesOnly,
                              LDAPSearchConstraints cons)
        throws LDAPException
    {
        super(  LDAPMessage.SEARCH_REQUEST,
                new RfcSearchRequest (
                    new RfcLDAPDN(base),
                    new ASN1Enumerated(scope),
                    new ASN1Enumerated(cons.getDereference()),
                    new ASN1Integer(cons.getMaxResults()),
                    new ASN1Integer(cons.getServerTimeLimit()),
                    new ASN1Boolean(typesOnly),
                    new RfcFilter(filter),
                    new RfcAttributeDescriptionList(attrs)),
               (cons != null) ? cons.getControls() : null);
        return;
    }

    /**
     * Created a SearchRequest with an already constructed filter
     * @param base
     * @param scope
     * @param filter
     * @param attrs
     * @param typesOnly
     * @param cons
     */
    public LDAPSearchRequest(String base,
                             int scope,
                             RfcFilter filter,
                             String[] attrs,
                             boolean typesOnly,
                             LDAPSearchConstraints cons)
    {
        super(  LDAPMessage.SEARCH_REQUEST,
            new RfcSearchRequest (
                new RfcLDAPDN(base),
                new ASN1Enumerated(scope),
                new ASN1Enumerated(cons.getDereference()),
                new ASN1Integer(cons.getMaxResults()),
                new ASN1Integer(cons.getServerTimeLimit()),
                new ASN1Boolean(typesOnly),
                filter,
                new RfcAttributeDescriptionList(attrs)),
                (cons != null) ? cons.getControls() : null);
        return;
    }
}
